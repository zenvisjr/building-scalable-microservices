

services:
  account:
    build:
      context: .
      dockerfile: ./account/app.dockerfile
    depends_on:
      - logger
      - account_db
      - nats
    environment:
      DATABASE_URL: postgres://zenvis:467578@account_db/zenvis?sslmode=disable
      LOGGER_SERVICE_URL: logger:9000
      MAIL_SERVICE_URL: mail:8080
    restart: on-failure
    # ports:
    #   - 9001:9001

  catalog:
    build:
      context: .
      dockerfile: ./catalog/app.dockerfile
    depends_on:
      - logger
      - catalog_db
    environment:
      DATABASE_URL: http://catalog_db:9200
      LOGGER_SERVICE_URL: logger:9000
    restart: on-failure
    # ports:
    #   - 9002:9002

  order:
    build:
      context: .
      dockerfile: ./order/app.dockerfile
    depends_on:
      - logger
      - order_db
      - nats
    environment:
      DATABASE_URL: postgres://zenvis:467578@order_db/zenvis?sslmode=disable
      ACCOUNT_SERVICE_URL: account:8080
      CATALOG_SERVICE_URL: catalog:8080
      LOGGER_SERVICE_URL: logger:9000
      MAIL_SERVICE_URL: mail:8080
    restart: on-failure
    # ports:
    #   - 9003:9003

  gateway:
    build:
      context: .
      dockerfile: ./gateway/app.dockerfile
    ports:
      - 8000:8080
      # - 8443:8443
    volumes:
      - ./gateway/certs:/app/certs
    depends_on:
      - account
      - catalog
      - order
      - logger
      - nats
      - auth
    environment:
      ACCOUNT_SERVICE_URL: account:8080
      CATALOG_SERVICE_URL: catalog:8080
      ORDER_SERVICE_URL: order:8080
      LOGGER_SERVICE_URL: logger:9000
      MAIL_SERVICE_URL: mail:8080
      AUTH_SERVICE_URL: auth:8080
    restart: on-failure

  logger:
    volumes:
    - ./logger/logs/centralized.log:/root/centralized.log
    build:
      context: .
      dockerfile: ./logger/app.dockerfile

    restart: unless-stopped
    # ports:
    #   - "9000:9000"
    environment:
      LOGGER_SERVICE_URL: logger:9000
    


  account_db:
    build:
      context: ./account
      dockerfile: ./db.dockerfile
    environment:
      POSTGRES_DB: zenvis
      POSTGRES_USER: zenvis
      POSTGRES_PASSWORD: 467578
    volumes:
      - account_data:/var/lib/postgresql/data
    restart: unless-stopped

  catalog_db:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.4
    environment:
      ES_JAVA_OPTS: -Xms1g -Xmx1g
      discovery.type: single-node
    volumes:
      - catalog_data:/usr/share/elasticsearch/data
    restart: unless-stopped

  order_db:
    build:
      context: ./order
      dockerfile: ./db.dockerfile
    environment:
      POSTGRES_DB: zenvis
      POSTGRES_USER: zenvis
      POSTGRES_PASSWORD: 467578
    volumes:
      - order_data:/var/lib/postgresql/data
    restart: unless-stopped

  mail:
    build:
      context: .
      dockerfile: ./mail/app.dockerfile
    ports:
      - "9010:8080"
    environment:
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      FROM_EMAIL: ${FROM_EMAIL}
      FROM_NAME: ${FROM_NAME}
      LOGGER_SERVICE_URL: logger:9000
    restart: unless-stopped
    depends_on:
      - nats

  auth:
    build:
      context: .
      dockerfile: ./auth/app.dockerfile
    ports:
      - "9020:8080"
    environment:
      LOGGER_SERVICE_URL: logger:9000
      DATABASE_URL: postgres://zenvis:467578@refresh_tokens_db/zenvis?sslmode=disable
    restart: unless-stopped
    depends_on:
      - account_db
      - refresh_tokens_db
      - account
      - logger
      - nats

  refresh_tokens_db:
    build:
      context: ./auth
      dockerfile: ./db.dockerfile
    environment:
      POSTGRES_DB: zenvis
      POSTGRES_USER: zenvis
      POSTGRES_PASSWORD: 467578
    volumes:
      - auth_data:/var/lib/postgresql/data
    restart: unless-stopped


  nats:
    image: nats:latest
    ports:
      - "4222:4222"   # Client connections
      - "8222:8222"   # Monitoring (optional)
    restart: unless-stopped
    command: ["-js"] 

volumes:
  account_data:
  order_data:
  catalog_data:
  auth_data:


#   prometheus:
#     image: prom/prometheus
#     volumes:
#       - ./prometheus.yml:/etc/prometheus/prometheus.yml
#     ports:
#       - "9090:9090"
#     depends_on:
#       - account
#       - catalog
#       - order
#       - gateway


#   grafana:
#     image: grafana/grafana:latest
#     container_name: grafana
#     ports:
#       - "3000:3000"
#     depends_on:
#       - prometheus
#     volumes:
#       - grafana-storage:/var/lib/grafana
#     restart: unless-stopped

# volumes:
#   grafana-storage:
