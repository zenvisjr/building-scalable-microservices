pagination
envconfig.Process()
github.com/segmentio/ksuid
go get github.com/avast/retry-go
blank import for postgres

generate graphql code (run this in same folder where ur schema is present)
go get github.com/99designs/gqlgen
go run github.com/99designs/gqlgen generate


remove previously installed docker
docker compose down -v --remove-orphans
docker rmi $(docker images --filter=reference='building-scalable-microservices-*' -q)

build docker
docker compose build -
OR
docker compose build --no-cache (if u dont want cache)

run docker
docker compose up -d

build and run docker
docker compose up -d --build

to check running dockers
docker ps


doccker errors:

gateway main.go
Config struct had all filed starting with small letters
envconfig was written as envservice
in order, catalog, account url dosent has SERVICE in it -> `envconfig:"ORDER_SERVICE_URL"`

added this for handlers
	h.Use(extension.Introspection{}) // <-- add this line
	h.AddTransport(transport.POST{})
	h.AddTransport(transport.GET{})
	h.AddTransport(transport.MultipartForm{})

important thing missed: 
database url VS account and catalog url 
DATABASE_URL
ACCOUNT_SERVICE_URL
CATALOG_SERVICE_URL

i put DATABASE_SEVICE_URL everywhere so connection was refused

also i made account table in postgres insted of accounts


how to enter a docker annd ping another doccker from it
find container name: docker ps
enter container: docker exec -it <container_name> /bin/bash
ping another docker: ping <container_name>


build and restart only 1 service
docker compose build <service-name>
docker compose up -d <service-name>

remove all containers
 docker compose down -v --remove-orphans


error in logger
2025/07/26 10:32:37 Failed to log to remote service: rpc error: code = Unavailable desc = dns: A record lookup error: lookup logger-service on 127.0.0.11:53: server misbehaving
because in grpc.NewClient() url i was using logger-service:9000 insted of logger:9000
as in docker-compose.yml file the service name is logger not logger-service


mounting centralized.log file
without mounting only file will be created but no logs will be written on it
logs are written on container 
access it using:
docker exec -it building-scalable-microservices_logger_1 cat centralized.log
when u mount it, logs are written on file
to mount add:
volumes:
    - ./logger/logs/centralized.log:/root/centralized.log
make sure to make the directory and file before running docker
as docker will assume path to be directory so a directory will be created of name centralized.log
update openFile path to /root/centralized.log


dont use var Logs = logger.GetGlobalLogger() globally
use it inside function because to use if we must first initLogger()

all microservices need to connect to logger so explose LOGGER_SERVICE_URL: 9000 in every microservices in docker compose






new features implemented

centralized logging with grpc
grpc logging interceptor
local logging with zap
mail microservice
✅ NATS for async email queuing

✅ Template rendering (HTML + Text)

token versioning
auth service



note: always add LOGGER_SERVICE_URL in docker compose in all services as they need to connect to logger and use the logger 

use below command if getting error vendor is locked while generating graphql code
 GOFLAGS=-mod=mod go run github.com/99designs/gqlgen generate


 in middleware.go file and auth.client.go file UserClaims struct was different UserID Vs ID so GetUserFromContext and RequireAdmin functions were changed was failing as error in type assertion
 took my 5-6 hours to figure it out
 finally i directly called auth.UserClaims{} from auth.client.go file


 last

 refresh token db
https
input validation in all services
logout
reset password
current logged in user


do not use references in sql if the attribute ur refering to in in another database
because in docker they cant communicate with each other

check prosgres sql in docker
docker exec -it building-scalable-microservices_catalog_db_1 psql -U zenvis -d zenvis
\l
\c zenvis
\dt 
SELECT * FROM accounts;