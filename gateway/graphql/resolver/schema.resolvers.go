package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"

	"github.com/zenvisjr/building-scalable-microservices/gateway/graphql/generated"
	"github.com/zenvisjr/building-scalable-microservices/gateway/graphql/model"
	"github.com/zenvisjr/building-scalable-microservices/gateway/internals/models"
)

// Orders is the resolver for the orders field.
func (r *accountResolver) Orders(ctx context.Context, obj *models.Account) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: Orders - orders"))
}

// CreateAccount is the resolver for the createAccount field.
func (r *mutationResolver) CreateAccount(ctx context.Context, input model.AccountInput) (*models.Account, error) {
	panic(fmt.Errorf("not implemented: CreateAccount - createAccount"))
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.ProductInput) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: CreateProduct - createProduct"))
}

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.OrderInput) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: CreateOrder - createOrder"))
}

// Accounts is the resolver for the accounts field.
func (r *queryResolver) Accounts(ctx context.Context, pagination model.Pagination, id *string) ([]*models.Account, error) {
	panic(fmt.Errorf("not implemented: Accounts - accounts"))
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context, pagination model.Pagination, query *string, id *string) ([]*model.Product, error) {
	panic(fmt.Errorf("not implemented: Products - products"))
}

// Account returns generated.AccountResolver implementation.
func (r *Resolver) Account() generated.AccountResolver { return &accountResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type accountResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
